++ Задача Собрать Цепочку Наследования MObject
[template: ШаблонКарточкиЗадачи]

+++Состояние задачи
* выполнено 30.12.2018 16:01:12

+++Задание
Собрать цепочку наследования классов MObject-MElement везде где они должны быть

+++Зависимости
Добавить зависимости текущей задачи

+++Материалы
 * Ссылки на источники данных

+++Обсуждение и принятые решения
  - Надо добавить функции сериализации и наследуемые проперти из MObject MElement во все подклассы цепочки. Как болванки, код функций пока не добавлять.
  + добавил функции сериализации, и они не переопределяются в производных классах.
    Приходится в каждом производном классе их переопределять.
  + Добавил наследуемые проперти для MContainer MLink MCell MCellA MCellB
  + все компилируется без ошибок. Все места помечены тегом тодо.
  - Теперь надо наполнять функции кодом. Но пока не готова теория для этого.
* Ранее я хотел заменить MObject на ImSerializable, но оказалось, что для размера проекта разницы никакой, а кода переписывать много придется. Поэтому отказался.    

+++Выполняемые действия

++++1. MObject
    /// <summary>
    /// RT-Обеспечивает наследуемые функции сериализации для потомков
    /// </summary>
    public abstract class MObject
    {
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public abstract void toBinary(BinaryWriter writer);
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public abstract void fromBinary(BinaryReader reader);
        /// <summary>
        /// Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public abstract byte[] toBinaryArray();

        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public abstract string toTextString(bool withHex);
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public abstract void toText(TextWriter writer, bool withHex);
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public abstract void fromText(TextReader reader);
    }

++++2. MElement
  /// <summary>
    /// RT-Обеспечивает единообразие полей для Связей, Ячеек и Контейнера
    /// </summary>
    public abstract class MElement: MObject
    {
        #region *** MElement property set ***
        /// <summary>
        /// Идентификатор элемента
        /// </summary>
        /// <remarks>
        /// Идентификатор должен быть приведен к типу MID.
        /// </remarks>
        public abstract MID ID
        {
            get;
            set;
        }

        /// <summary>
        /// Название элемента
        /// </summary>
        /// <remarks>Строка названия длиной до 128 символов.</remarks>
        public abstract string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// Описание элемента
        /// String.Empty по умолчанию.
        /// </summary>
        public abstract string Description
        {
            get;
            set;
        }

        /// <summary>
        /// Flag is element active or deleted 
        /// Default true
        /// </summary>
        public abstract bool isActive
        {
            get;
            set;
        }

        /// <summary>
        /// Сервисное значение
        /// </summary>
        /// <remarks>
        /// Значение используемое для поиска в графе и подобных целях. 
        /// По умолчанию = 0.
        /// </remarks>
        public abstract Int32 ServiceFlag
        {
            get;
            set;
        }

        /// <summary>
        /// Состояние элемента
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей состояние этого элемента</remarks>
        public abstract MCellId ElementState
        {
            get;
            set;
        }

        /// <summary>
        /// Класс элемента
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей класс этого элемента</remarks>
        public abstract MCellId ElementClass
        {
            get;
            set;
        }

        /// <summary>
        /// Флаг только чтение
        /// </summary>
        /// <remarks>
        /// По умолчанию = false
        /// </remarks>
        public abstract bool isReadOnly
        {
            get;
            set;
        }

        /// <summary>
        /// Таймштамп создания элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public abstract DateTime LastCreate
        {
            get;
            internal set;
        }

        /// <summary>
        /// Таймштамп последнего изменения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public abstract DateTime LastChange
        {
            get;
            internal set;
        }

        /// <summary>
        /// Таймштамп последнего чтения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public abstract DateTime LastRead
        {
            get;
            internal set;
        }
        #endregion

        #region MObject Members
        /// <summary>
        /// NR-Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();//Определить в производных классах
        }
        /// <summary>
        /// NR-Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();//Определить в производных классах
        }
        /// <summary>
        /// NR-Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            throw new NotImplementedException();//Определить в производных классах
        }
        /// <summary>
        /// NR-Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//Определить в производных классах
        }
        /// <summary>
        /// NR-Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();//Определить в производных классах
        }
        /// <summary>
        /// NR-Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();//Определить в производных классах
        }
        #endregion

        /// <summary>
        /// NT-Вспомогательная функция для Mobject.toBinaryArray()
        /// </summary>
        /// <returns></returns>
        protected virtual byte[] toBinaryArraySub()
        {
            //create memory stream and writer
            MemoryStream ms = new MemoryStream(64);//initial size for cell data 
            BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
            //convert data
            this.toBinary(bw);
            //close memory stream and get bytes
            bw.Close();
            return ms.ToArray();
        }
    }
    
++++3. Добавить код в MContainer 
 
       #region *** MElement property set ***
        //Значения для интерфейса MElement берутся из объекта MSolutionSettings

        /// <summary>
        /// Идентификатор элемента
        /// </summary>
        /// <remarks>
        /// Идентификатор должен быть приведен к типу MID.
        /// </remarks>
        public override MID ID
        {
            get
            {
                return new MID(this.m_Solution.Settings.SolutionId, MID.InvalidIdentifierOfElement); //See MID.InvalidIdentifierOfElement = 0
            }
            set
            {
                this.m_Solution.Settings.SolutionId = value.ContainerId;
            }
        }


        /// <summary>
        /// Название элемента
        /// </summary>
        /// <remarks>Строка названия длиной до 128 символов.</remarks>
        public override string Name
        {
            get { return this.m_Solution.Settings.SolutionName; }
            set { this.m_Solution.Settings.SolutionName = MSolutionSettings.checkNameLength(value); }
        }

        /// <summary>
        /// Описание элемента
        /// String.Empty по умолчанию.
        /// </summary>
        public override string Description
        {
            get { return this.m_Solution.Settings.SolutionDescription; }
            set { this.m_Solution.Settings.SolutionDescription = value; }
        }

        /// <summary>
        /// Flag is element active or deleted 
        /// Default true
        /// </summary>
        public override bool isActive
        {
            get { return this.m_Solution.Settings.ContainerIsActiveFlag; }
            set { this.m_Solution.Settings.ContainerIsActiveFlag = value; }
        }

        /// <summary>
        /// Сервисное значение
        /// </summary>
        /// <remarks>
        /// Значение используемое для поиска в графе и подобных целях. 
        /// По умолчанию = 0.
        /// </remarks>
        public override int ServiceFlag
        {
            get { return this.m_Solution.Settings.ContainerServiceFlag; }
            set { this.m_Solution.Settings.ContainerServiceFlag = value; }
        }

        /// <summary>
        /// Состояние элемента
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей состояние этого элемента</remarks>
        public override MCellId ElementState
        {
            get { return MCellId.FromU64(this.m_Solution.Settings.ContainerState); }
            set { this.m_Solution.Settings.ContainerState = value.ToU64(); }
        }

        //новые члены интерфейса:

        /// <summary>
        /// NR-Класс элемента
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей класс этого элемента</remarks>
        public override MCellId ElementClass
        {
            get { return MCellId.FromU64(this.m_Solution.Settings.ContainerClass); }
            set { this.m_Solution.Settings.ContainerClass = value.ToU64(); }
        }

        /// <summary>
        /// NT-Флаг только чтение
        /// </summary>
        /// <remarks>
        /// По умолчанию = false
        /// </remarks>
        public override bool isReadOnly
        {
            get { return this.m_Solution.SolutionReadOnly; }
            set { this.m_Solution.SolutionReadOnly = value; }
        }

        /// <summary>
        /// NR-Таймштамп создания элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastCreate
        {
            get { return this.m_Solution.Settings.SolutionCreationDate; } 
            internal set { this.m_Solution.Settings.SolutionCreationDate = value; }
        }

        /// <summary>
        /// NR-Таймштамп последнего изменения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastChange
        {
            get { return this.m_Solution.Settings.SolutionModificationDate; }
            internal set { this.m_Solution.Settings.SolutionModificationDate = value; }
        }

        /// <summary>
        /// NR-Таймштамп последнего чтения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastRead
        {
            get {return this.m_Solution.Settings.SolutionReadingDate; }
            internal set { this.m_Solution.Settings.SolutionReadingDate = value; }
        }


        #endregion


       #region *** MObject serialization functions ***
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();
        }
        ///// <summary>
        ///// Convert object data to byte array
        ///// </summary>
        ///// <returns></returns>
        //public override byte[] toBinaryArray()
        //{
        //    //create memory stream and writer
        //    MemoryStream ms = new MemoryStream(64);//initial size for cell data 
        //    BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
        //    //convert data
        //    this.toBinary(bw);
        //    //close memory stream and get bytes
        //    bw.Close();
        //    return ms.ToArray();
        //}
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Добавить обобщенный наследуемый код сериализации здесь
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();
        }
        #endregion
 
 
++++4. Добавить код в MSolutionSettings
        /// <summary>
        /// Максимальная длина названия контейнера, ячейки, связи.
        /// </summary>
        /// <remarks>
        /// Зависит от ограничений СУБД на текстовые поля в таблицах
        /// TODO: может, перенести ее в адаптер БД как переменную-свойство применяемой бд?
        /// но надо посмотреть ее использование
        /// </remarks>
        internal const int ElementNameLengthMax = 128;
        
        /// <summary>
        /// Solution modification timestamp
        /// </summary>
        private DateTime m_modiDate;
        /// <summary>
        /// Solution reading timestamp
        /// </summary>
        private DateTime m_readDate;
        /// <summary>
        /// Класс контейнера
        /// </summary>
        private UInt64 m_containerClass_U64;
        
        /// <summary>
        /// Таймштамп изменения солюшена
        /// </summary>
        [Category("Solution properties"), Description("Solution last write timestamp")]
        public DateTime SolutionModificationDate
        {
            get
            {
                return m_modiDate;
            }
            set
            {
                m_modiDate = value;
            }
        }
        /// <summary>
        /// Таймштамп чтения солюшена
        /// </summary>
        [Category("Solution properties"), Description("Solution last reading timestamp")]
        public DateTime SolutionReadingDate
        {
            get
            {
                return m_readDate;
            }
            set
            {
                m_readDate = value;
            }
        }
        /// <summary>
        /// Container class identifier as U64-packed value
        /// </summary>
        [Category("Container properties"), Description("Container class identifier packed to U64")]
        public UInt64 ContainerClass
        {
            get
            {
                return m_containerClass_U64;
            }
            set
            {
                m_containerClass_U64 = value;
            }
        }
        
        /// <summary>
        /// NT-Проверить, что длина имени не превышает установленного предела.
        /// Если это не так, выбрасывается исключение.
        /// </summary>
        /// <param name="elementName">Имя элемента</param>
        /// <returns>Возвращает имя элемента. Пробелы на концах обрезаются функцией String.Trim()</returns>
        /// <exception cref="NullReferenceException">Когда имя элемента = null</exception>
        /// <exception cref="SimEngineException">Когда длина имени элемента больше установленного предела</exception>
        public static String checkNameLength(String elementName)
        {
            if (elementName == null)
                throw new NullReferenceException("Element name is null");

            String t = elementName.Trim();
            if (t.Length > MSolutionSettings.ElementNameLengthMax)
                throw new SimEngineException("Длина имени элемента больше установленного предела");

            return t;
        }
      
      #region *** MObject serialization functions ***
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// NT-Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            //create memory stream and writer
            MemoryStream ms = new MemoryStream(64);//initial size for cell data 
            BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
            //convert data
            this.toBinary(bw);
            //close memory stream and get bytes
            bw.Close();
            return ms.ToArray();
        }
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Добавить обобщенный наследуемый код сериализации здесь
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();
        }
        #endregion
        
++++5. Добавить код в MLink
#region *** MElement property set ***
        /// <summary>
        /// Идентификатор элемента
        /// </summary>
        /// <remarks>
        /// Идентификатор должен быть приведен к типу MID.
        /// </remarks>
        public override MID ID
        {
            get
            {
                throw new NotImplementedException();//TODO: Add code here...
            }
            set
            {
                throw new NotImplementedException();//TODO: Add code here...
            }
        }
        
        /// <summary>
        /// Название элемента
        /// </summary>
        /// <remarks>Для связи не хранится название. Проперти всегда возвращает пустую строку.</remarks>
        public override string Name
        {
            get { return String.Empty; }
            set {  }
        }

        /// <summary>
        /// Описание элемента
        /// String.Empty по умолчанию.
        /// </summary>
        public override string Description
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Flag is element active or deleted 
        /// Default true
        /// </summary>
        public override bool isActive
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Сервисное значение
        /// </summary>
        /// <remarks>
        /// Значение используемое для поиска в графе и подобных целях. 
        /// По умолчанию = 0.
        /// </remarks>
        public override Int32 ServiceFlag
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Состояние элемента
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей состояние этого элемента</remarks>
        public override MCellId ElementState
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }


        //новые члены интерфейса:

        /// <summary>
        /// NR-Класс элемента
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей класс этого элемента</remarks>
        public override MCellId ElementClass
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Флаг только чтение
        /// </summary>
        /// <remarks>
        /// По умолчанию = false
        /// </remarks>
        public override bool isReadOnly
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп создания элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastCreate
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп последнего изменения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastChange
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NT-Таймштамп последнего чтения элемента
        /// </summary>
        /// <remarks>
        /// Для связи это значение не хранится. Возвращает всегда DateTime.MinValue.
        /// </remarks>
        public override DateTime LastRead
        {
            get { return DateTime.MinValue; }//TODO: Add code here... 
            internal set { }//TODO: Add code here...
        }
        #endregion

       #region *** MObject serialization functions ***
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();
        }
        ///// <summary>
        ///// Convert object data to byte array
        ///// </summary>
        ///// <returns></returns>
        //public override byte[] toBinaryArray()
        //{
        //    //create memory stream and writer
        //    MemoryStream ms = new MemoryStream(64);//initial size for cell data 
        //    BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
        //    //convert data
        //    this.toBinary(bw);
        //    //close memory stream and get bytes
        //    bw.Close();
        //    return ms.ToArray();
        //}
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Добавить обобщенный наследуемый код сериализации здесь
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();
        }
        #endregion
        
++++6. Добавить код в MCellA

#region *** MElement property set ***
        /// <summary>
        /// Идентификатор элемента
        /// </summary>
        /// <remarks>
        /// Идентификатор должен быть приведен к типу MID.
        /// </remarks>
        public override MID ID
        {
            get
            {
                throw new NotImplementedException();//TODO: Add code here...
            }
            set
            {
                throw new NotImplementedException();//TODO: Add code here...
            }
        }

        /// <summary>
        /// Название элемента
        /// </summary>
        /// <remarks>Строка названия длиной до 128 символов.</remarks>
        public override string Name
        {
            get {  throw new NotImplementedException(); }//TODO: Add code here...
            set
            { //= MSolutionSettings.checkNameLength(Value);
                throw new NotImplementedException(); }
        }

        /// <summary>
        /// Описание элемента
        /// String.Empty по умолчанию.
        /// </summary>
        public override string Description
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Flag is element active or deleted 
        /// Default true
        /// </summary>
        public override bool isActive
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Сервисное значение
        /// </summary>
        /// <remarks>
        /// Значение используемое для поиска в графе и подобных целях. 
        /// По умолчанию = 0.
        /// </remarks>
        public override int ServiceFlag
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Состояние элемента
        /// Бывший State
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей состояние этого элемента</remarks>
        public override MCellId ElementState
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        //новые члены интерфейса:

        /// <summary>
        /// NR-Класс элемента
        /// Бывший TypeId
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей класс этого элемента</remarks>
        public override MCellId ElementClass
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Флаг только чтение
        /// </summary>
        /// <remarks>
        /// По умолчанию = false
        /// </remarks>
        public override bool isReadOnly
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп создания элемента
        /// Бывший CreaTime
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastCreate
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп последнего изменения элемента
        /// Бывший ModiTime
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastChange
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп последнего чтения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastRead
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }
        #endregion
        
        #region *** MObject serialization functions ***
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        #endregion

++++7. Добавить код в MCellB

#region *** MElement property set ***
        /// <summary>
        /// Идентификатор элемента
        /// </summary>
        /// <remarks>
        /// Идентификатор должен быть приведен к типу MID.
        /// </remarks>
        public override MID ID
        {
            get
            {
                throw new NotImplementedException();//TODO: Add code here...
            }
            set
            {
                throw new NotImplementedException();//TODO: Add code here...
            }
        }

        /// <summary>
        /// Название элемента
        /// </summary>
        /// <remarks>Строка названия длиной до 128 символов.</remarks>
        public override string Name
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set
            { //= MSolutionSettings.checkNameLength(Value);
                throw new NotImplementedException(); }
        }

        /// <summary>
        /// Описание элемента
        /// String.Empty по умолчанию.
        /// </summary>
        public override string Description
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Flag is element active or deleted 
        /// Default true
        /// </summary>
        public override bool isActive
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Сервисное значение
        /// </summary>
        /// <remarks>
        /// Значение используемое для поиска в графе и подобных целях. 
        /// По умолчанию = 0.
        /// </remarks>
        public override int ServiceFlag
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Состояние элемента
        /// Бывший State
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей состояние этого элемента</remarks>
        public override MCellId ElementState
        {
            get { throw new NotImplementedException(); }//TODO: Add code here...
            set { throw new NotImplementedException(); }
        }

        //новые члены интерфейса:

        /// <summary>
        /// NR-Класс элемента
        /// Бывший TypeId
        /// </summary>
        /// <remarks>Идентификатор ячейки, описывающей класс этого элемента</remarks>
        public override MCellId ElementClass
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Флаг только чтение
        /// </summary>
        /// <remarks>
        /// По умолчанию = false
        /// </remarks>
        public override bool isReadOnly
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп создания элемента
        /// Бывший CreaTime
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastCreate
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп последнего изменения элемента
        /// Бывший ModiTime
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastChange
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }

        /// <summary>
        /// NR-Таймштамп последнего чтения элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        public override DateTime LastRead
        {
            get { throw new NotImplementedException(); }//TODO: Add code here... 
            internal set { throw new NotImplementedException(); }//TODO: Add code here...
        }
        #endregion
        
        #region *** MObject serialization functions ***
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            //return this.toBinaryArraySub();
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();//TODO: Add code here...
        }
        #endregion

++++8. Добавить код в MCell
Код проперти MElement тут не переопределяется, да и MObject тоже можно бы пропустить в производные классы.

       #region *** MObject serialization functions ***
        // осмотрены для первой компиляции проекта 
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();
        }
        #endregion

+++Отзывы
Оказались ли принятые решения правильными и почему/почему нет.

+++Документация
++++Иерархия классов
    * MObject
        * MVersion
        * MSolutionSettings
        * MElement
            * MContainer
            * MLink
            * MCell
                * MCellA
                * MCellB 

++++MObject
* Класс MObject это базовый абстрактный класс для типов Движка. Он содержит функции сериализации объектов в двоичный поток и в текстовый поток.
* функции:
    * public abstract void toBinary(BinaryWriter writer); ///Convert object data to binary stream
    * public abstract void fromBinary(BinaryReader reader); /// Convert object data from binary stream
    * public abstract byte[] toBinaryArray(); /// Convert object data to byte array
    * public abstract string toTextString(bool withHex); /// Convert object data to text string
    * public abstract void toText(TextWriter writer, bool withHex); /// Convert object data to text stream
    * public abstract void fromText(TextReader reader); /// Convert object data from text stream

++++MElement
* Класс MElement это абстрактный класс, содержащий набор свойств элемента одинаковый для контейнера, ячеек и связей.
* члены:
    * public abstract MID ID /// Идентификатор элемента
    * public abstract string Name /// Название элемента
    * public abstract string Description /// Описание элемента
    * public abstract bool isActive /// Flag is element active or deleted
    * public abstract Int32 ServiceFlag /// Сервисное значение
    * public abstract MCellId ElementState /// Состояние элемента
    * public abstract MCellId ElementClass /// Класс элемента
    * public abstract bool isReadOnly /// Флаг только чтение
    * public abstract DateTime LastCreate /// Таймштамп создания элемента
    * public abstract DateTime LastChange /// Таймштамп последнего изменения элемента
    * public abstract DateTime LastRead  /// Таймштамп последнего чтения элемента
    
    
    
    
    
       
