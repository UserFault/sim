++ Задача Собрать Код Статистики Солюшена
[template: ШаблонКарточкиЗадачи]

+++Состояние задачи
* Выполнена 06.01.2019 18:51:05

+++Задание
todo: Описать задание

+++Зависимости
 * ЗадачаРешитьЧтоВходитВСтатистикуСолюшена

+++Материалы
 * ЗадачаРешитьЧтоВходитВСтатистикуСолюшена
 * wikirel://../../../Справочники/ДвижокТаппВики/ДвижокТаппВики.wiki?page=Контейнер%2FПолучить%20статистику%20Солюшена

+++Обсуждение и принятые решения
* Эта статистика превратилась в целое ветвистое дерево. Раньше она была простой, а сейчас пронизывает все классы, хотя все так же тупа.
    * поскольку изменения элементов не производится, функция может работать на read-only Солюшене.
    * Она начинается с MSolution.SolutionGetStatistics(), которая вызывает внутреннюю getStatistics().
    * Которая вызывает getStatistics(..) из каждого менеджера подсистем Движка. Там кждый менеджер должен запонить передаваемый объект статистики в своих полях. Так менеджеры относительно независимы получаются в плане статистики.
    * Для подсчета сторонних солюшенов в MContainer вызывается функция private List<int> getExternalSolutionList(). Она вызывает функции grabExternalSolutions( UnicalInt32Collection ) из списка ячеек контейнера, списка связей контейнера и адаптера БД. Для каждой (Активной!) ячейки и связи из всех идентификаторов элементов извлекается идентификатор солюшена и записывается в коллекцию - словарь счетчиков UnicalInt32Collection. 
    * В итоге вся операция сбора статистики переворошит весь Солюшен и соберет данные в объект статистики. Это очень медленно будет делаться.
* Сделал класс MStatistics, а класс MSolutionSettings сделал производным от него.
    * Поскольку MSolutionSettings слишком нагружен свойствами, там сложно ориентироваться.
    * Наследовал, чтобы ХМЛ обрабатывал объект статистики как часть настроек солюшена. Хотя, возможно, следует не наследовать, а включить как подраздел, чтобы в файле образовался четкий подраздел Статистика солюшена.
+++Выполняемые действия
++++1. Класс UnicalInt32Collection
using System;
using System.Collections.Generic;
using System.Text;

namespace Bar.Utility
{
    /// <summary>
    /// NT-Вспомогательный класс словаря счетчиков значений Int32
    /// </summary>
    public class UnicalInt32Collection
    {
        private Dictionary<int, int> m_dict;

        public UnicalInt32Collection()
        {
            this.m_dict = new Dictionary<int, int>();
        }

        /// <summary>
        /// Словарь счетчиков уникальных значений
        /// </summary>
        public Dictionary<int, int> DictionaryOfCounters
        {
            get { return this.m_dict; }
        }
        /// <summary>
        /// Список значений без счетчиков
        /// </summary>
        public List<int> Items
        {
            get { return new List<int>(this.m_dict.Values); }
        }
        /// <summary>
        /// NT-Очистить коллекцию
        /// </summary>
        public void Clear()
        {
            this.m_dict.Clear();
        }

        /// <summary>
        /// NT-Добавить значение
        /// </summary>
        /// <param name="value">Значение</param>
        public void Add(Int32 value)
        {
            if (this.m_dict.ContainsKey(value))
                this.m_dict[value]++;
            else
                this.m_dict.Add(value, 1);

            return;
        }
        /// <summary>
        /// NT-Добавить значение и количество
        /// </summary>
        /// <param name="value">Значение</param>
        /// <param name="count">Количество</param>
        public void Add(Int32 value, Int32 count)
        {
            if (this.m_dict.ContainsKey(value))
                this.m_dict[value]+= count;
            else
                this.m_dict.Add(value, count);

            return;
        }


    }
}
++++2. Класс MSolution
        /// <summary>
        /// NR-Получить Статистику Солюшена
        /// </summary>
        /// <returns>
        /// Возвращает статистику Солюшена.
        /// Статистика Солюшена входит в состав Настроек Солюшена 
        /// и обновляется при закрытии Солюшена или при вызове этой функции.
        /// Статистика Солюшена входит в состав Файла Полного Снимка Солюшена и обновляется перед его созданием.
        /// </returns>
        public MStatistics SolutionGetStatistics()
        {
            MStatistics stat = new MStatistics();
            //TODO: можно бы перенести этот код в сам объект статистики.
            //а впрочем - тут быстрее и проще заполнять это все.
            //Так как все под рукой и в контексте Слюшена
            getStatistics(stat);

            return stat; 
        }

        /// <summary>
        /// NR-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal void getStatistics(MStatistics stat)
        {
            //сначала надо проверить что Солюшен не закрыт, проверив флаг СостояниеСолюшена.
            if (!this.isReady)//выбросить исключение, если солюшен не готов к работе
                throw new SimEngineException(String.Format("Солюшен не готов к работе: SolutionState={0}", this.SolutionState.ToString()));

            //затем надо подсчитать эту статистику и вписать ее в переданный объект
            this.m_Container.getStatistics(stat);
            this.m_DbAdapter.getStatistics(stat);
            this.Resources.getStatistics(stat);
            this.Methods.getStatistics(stat);
            this.Snapshots.getStatistics(stat);
            this.m_LogManager.getStatistics(stat);

            return;
        }
++++3. Класс MContainer
        /// <summary>
        /// NT-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal void getStatistics(MStatistics stat)
        {
            stat.CellsInMemory = this.m_Cells.Count;
            //TODO: пока неясно как работать с внешними ячейками, пока 0
            stat.ExternalCells = 0;
            stat.ExternalLinks = 0;
            //И надо собрать список внешних солюшенов - из БД и из Списка ячеек контейнера. Или списка связей ?
            stat.ExternalSolutionList = this.getExternalSolutionList();
            stat.LinksInMemory = this.m_Links.Count;
            stat.TemporaryCells = this.m_Cells.getNumberOfTemporaryCells();
            stat.TemporaryLinks = this.m_Links.getNumberOfTemporaryLinks();

            return;
        }
        /// <summary>
        /// NT-Собрать список внешних солюшенов из БД и из Списка ячеек контейнера и Списка связей контейнера
        /// Медленная функция
        /// </summary>
        /// <returns></returns>
        private List<int> getExternalSolutionList()
        {
            //создать коллекцию - словарь счетчиков
            UnicalInt32Collection solids = new UnicalInt32Collection();
            //подсчитываем упоминания внешних солюшенов
            //-в самом контейнере
            solids.Add(this.ElementClass.ContainerId);
            solids.Add(this.ElementState.ContainerId);
            solids.Add(this.ID.ContainerId);
            //- в содержимом контейнера
            this.m_Links.grabExternalSolutions(solids);
            this.m_Cells.grabExternalSolutions(solids);
            this.m_DbAdapter.grabExternalSolutions(solids);
            //возвращаем список. 
            //TODO: Сейчас счетчики не используются, но надо их добавить в статистику как элементы списка.
            List<int> result = solids.Items;
            solids.Clear();

            return result; 
        }

++++4. Класс MCellCollection

        /// <summary>
        /// NT-get number of anysort temp cells in dictionary
        /// </summary>
        /// <returns></returns>
        public int getNumberOfTemporaryCells()
        {
            int cnt = 0;
            foreach (MCell ce in m_items.Values)
            {
                if (ce.CellMode == MCellMode.Temporary)
                    cnt++;
            }
            return cnt;
        }
        /// <summary>
        /// NT-Выявить солюшены и собрать их идентификаторы в переданный словарь
        /// </summary>
        /// <param name="solids">Словарь для сбора идентификаторов солюшенов</param>
        internal void grabExternalSolutions(UnicalInt32Collection solids)
        {
            //find id in link
            foreach (MCell cell in this.Items)
            {
                //если ячейка постоянная и локальная, то ее проверять будем в адаптере БД
                if (cell.isConstAndLocal) continue;
                //считаем только активные ячейки
                if (!cell.isActive) continue;
                //а если нет, то тут
                solids.Add(cell.ElementClass.ContainerId);
                solids.Add(cell.ElementState.ContainerId);
                solids.Add(cell.ID.ContainerId);
                solids.Add(cell.ValueTypeId.ContainerId);
            }

            return;
        }

++++5. Класс MContainerLinkCollection
        /// <summary>
        /// NT-Получить число временных связей в памяти.
        /// Локальных и внешних.
        /// </summary>
        /// <returns></returns>
        internal int getNumberOfTemporaryLinks()
        {
            int cnt = 0;
            foreach (MLink li in this.m_dictionary.Values)
                if (li.isTemporary)
                    cnt++;
            return cnt;
        }
        /// <summary>
        /// NT-Выявить солюшены и собрать их идентификаторы в переданный словарь
        /// </summary>
        /// <param name="solids">Словарь счетчиков для сбора идентификаторов солюшенов</param>
        internal void grabExternalSolutions(UnicalInt32Collection solids)
        {
            //find id in link
            foreach (MLink link in this.Items)
            {
                //если связь постоянная и локальная, то ее проверять будем в адаптере БД
                if (link.isConstAndLocal) continue;
                //считаем только активные
                if (!link.isActive) continue;
                //а если нет, то тут
                solids.Add(link.downCellId.ContainerId);
                solids.Add(link.ElementClass.ContainerId);
                solids.Add(link.ElementState.ContainerId);
                solids.Add(link.ID.ContainerId);
                solids.Add(link.upCellId.ContainerId);
            }

            return;
        }
++++6. Класс BaseDbAdapter
        /// <summary>
        /// NT-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal virtual void getStatistics(MStatistics stat)
        {
            //для NoDb просто вписываем нули в статистику, так как БД пустая
            
            stat.ConstantCells = this.getNumberOfCells();
            stat.ConstantLinks = this.getNumberOfLinks();
        }


        /// <summary>
        /// NT-Выявить внешние солюшены и собрать их идентификаторы в переданный словарь
        /// </summary>
        /// <param name="solids">Словарь для сбора идентификаторов солюшенов</param>
        internal void grabExternalSolutions(UnicalInt32Collection solids)
        {
            //для NoDb просто выходим...
            
            this.grabExternalSolutionsFromCellsTable(solids);
            this.grabExternalSolutionsFromLinksTable(solids);
            return;
        }
        /// <summary>
        /// NR-Выявить солюшены и собрать их идентификаторы в переданный словарь
        /// </summary>
        /// <param name="solids">Словарь для сбора идентификаторов солюшенов</param>
        private void grabExternalSolutionsFromLinksTable(UnicalInt32Collection solids)
        {
            //надо получить все идентификаторы из каждой связи
            //если связь активная
            //и выделить ид солюшена и вписать их сюда, если он не текущий
            //Теперь подсчитываем также и количество таких ссылок
            //solids.AddMID(curid, cell.ElementClass);
            
            throw new NotImplementedException();//TODO: Add code here...
        }
        /// <summary>
        /// NR-Выявить солюшены и собрать их идентификаторы в переданный словарь
        /// </summary>
        /// <param name="solids">Словарь для сбора идентификаторов солюшенов</param>
        private void grabExternalSolutionsFromCellsTable(UnicalInt32Collection solids)
        {
            //надо получить все идентификаторы из каждой ячейки  (4 шт в ячейке)
            //если ячейка активная
            //и выделить ид солюшена и вписать их сюда, если он не текущий
            //Теперь подсчитываем также и количество таких ссылок
            //solids.AddMID(curid, cell.ElementClass);
            
            throw new NotImplementedException();//TODO: Add code here...
        }
        
++++7. Класс MResourceManager  
        /// <summary>
        /// NR-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal void getStatistics(MStatistics stat)
        {
            //stat.ResourceSize
            //stat.ResourceFiles
            throw new NotImplementedException();//TODO: Add code here...
        }
++++8. Класс MSnapshotManager  
        /// <summary>
        /// NR-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal void getStatistics(MStatistics stat)
        {
            //stat.ResourceSize
            //stat.ResourceFiles
            throw new NotImplementedException();//TODO: Add code here...
        }
++++9. Класс MMethodManager  
        /// <summary>
        /// NR-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal void getStatistics(MStatistics stat)
        {
            //stat.ResourceSize
            //stat.ResourceFiles
            throw new NotImplementedException();//TODO: Add code here...
        }
++++10. Класс MLogManager  
        /// <summary>
        /// NR-Вписать статистику для подсистемы
        /// </summary>
        /// <param name="stat">Бланк статистики</param>
        internal void getStatistics(MStatistics stat)
        {
            //stat.ResourceSize
            //stat.ResourceFiles
            throw new NotImplementedException();//TODO: Add code here...
        }
++++11. Класс MStatistics
namespace Bar
{
    /// <summary>
    /// NT-Представляет статистику Солюшена
    /// </summary>
    /// <remarks>
    /// Разгружает класс настроек Солюшена от свойств статистики Солюшена
    /// </remarks>
    public class MStatistics : MObject
    {
        #region *** MStatistic fields ***
        /// <summary>
        /// Number of const and temp cells in memory
        /// </summary>
        protected int m_cellsmem;
        /// <summary>
        /// Number of const cells in database
        /// </summary>
        protected int m_cellsconst;
        /// <summary>
        /// Number of temp cells in memory
        /// </summary>
        protected int m_cellstemp;
        /// <summary>
        /// Number of used external cells  in any other containers
        /// </summary>
        protected int m_cellsext;
        /// <summary>
        /// Number of const and temp links in memory
        /// </summary>
        protected int m_linksmem;
        /// <summary>
        /// Number of const links in database
        /// </summary>
        protected int m_linksconst;
        /// <summary>
        /// Number of temp links in memory
        /// </summary>
        protected int m_linkstemp;
        /// <summary>
        /// Number of links to any external cells
        /// </summary>
        protected int m_linksext;
        /// <summary>
        /// Number of resource files in project
        /// </summary>
        protected int m_resourcefiles;
        /// <summary>
        /// Size of resource files in bytes
        /// </summary>
        protected long m_resourcesize;
        /// <summary>
        /// Список идентификаторов связанных внешних Солюшенов
        /// </summary>
        private List<Int32> m_externalSolutionList;

        #endregion

        /// <summary>
        /// Default constructor
        /// </summary>
        public MStatistics()
        {
            this.m_cellsconst = 0;
            this.m_cellsext = 0;
            this.m_cellsmem = 0;
            this.m_cellstemp = 0;
            this.m_externalSolutionList = new List<int>();
            this.m_linksconst = 0;
            this.m_linksext = 0;
            this.m_linksmem = 0;
            this.m_linkstemp = 0;
            this.m_resourcefiles = 0;
            this.m_resourcesize = 0;
        }

        #region *** MStatistic properties ***
        /// <summary>
        /// Number of const and temp cells in memory
        /// </summary>
        [Category("Statistics"), Description("Number of temporary and constant cells in memory")]
        public int Stat_CellsInMemory
        {
            get
            {
                return m_cellsmem;
            }
            set
            {
                m_cellsmem = value;
            }
        }

        /// <summary>
        /// Number of const cells in database
        /// </summary>
        [Category("Statistics"), Description("Number of constant cells in database")]
        public int Stat_ConstantCells
        {
            get
            {
                return m_cellsconst;
            }
            set
            {
                m_cellsconst = value;
            }
        }

        /// <summary>
        /// Number of temp cells in memory
        /// </summary>
        [Category("Statistics"), Description("Number of temporary cells")]
        public int Stat_TemporaryCells
        {
            get
            {
                return m_cellstemp;
            }
            set
            {
                m_cellstemp = value;
            }
        }

        /// <summary>
        /// Number of used external cells  in any other containers
        /// </summary>
        [Category("Statistics"), Description("Number of external linked cells")]
        public int Stat_ExternalCells
        {
            get
            {
                return m_cellsext;
            }
            set
            {
                m_cellsext = value;
            }
        }

        /// <summary>
        /// Number of const links in database
        /// </summary>
        [Category("Statistics"), Description("Number of constant links in database")]
        public int Stat_ConstantLinks
        {
            get
            {
                return m_linksconst;
            }
            set
            {
                m_linksconst = value;
            }
        }

        /// <summary>
        /// Number of const and temp links in memory
        /// </summary>
        [Category("Statistics"), Description("Number of constant and temporary links in memory")]
        public int Stat_LinksInMemory
        {
            get
            {
                return m_linksmem;
            }
            set
            {
                m_linksmem = value;
            }
        }

        /// <summary>
        /// Number of temp links in memory
        /// </summary>
        [Category("Statistics"), Description("Number of temporary links")]
        public int Stat_TemporaryLinks
        {
            get
            {
                return m_linkstemp;
            }
            set
            {
                m_linkstemp = value;
            }
        }

        /// <summary>
        /// Number of links to any external cells
        /// </summary>
        [Category("Statistics"), Description("Number of links to any external cells")]
        public int Stat_ExternalLinks
        {
            get
            {
                return m_linksext;
            }
            set
            {
                m_linksext = value;
            }
        }

        /// <summary>
        /// Number of resource files in project
        /// </summary>
        [Category("Statistics"), Description("Number of resource files in project")]
        public int Stat_ResourceFiles
        {
            get
            {
                return m_resourcefiles;
            }
            set
            {
                m_resourcefiles = value;
            }
        }

        /// <summary>
        /// Size of resource files in bytes
        /// </summary>
        [Category("Statistics"), Description("Size of resource files in bytes")]
        public long Stat_ResourceSize
        {
            get
            {
                return m_resourcesize;
            }
            set
            {
                m_resourcesize = value;
            }
        }

        /// <summary>
        /// NT-Список идентификаторов связанных внешних Солюшенов
        /// </summary>
        [Category("Statistics"), Description("List of linked external Solutions")]
        public List<Int32> Stat_ExternalSolutionList
        {
            get { return m_externalSolutionList; }
            set { m_externalSolutionList = value; }
        }
        #endregion
        /// <summary>
        /// NR-Get string representation of object.
        /// </summary>
        /// <returns>Return string representation of object.</returns>
        public override string ToString()
        {
            return base.ToString();
        }

        #region *** MObject serialization functions ***
        /// <summary>
        /// NR-Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// NR-Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// NT-Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            return this.toBinaryArraySub();
        }
        /// <summary>
        /// NR-Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Добавить обобщенный наследуемый код сериализации здесь
        }
        /// <summary>
        /// NR-Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// NR-Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// NT-вспомогательная функция
        /// </summary>
        /// <returns></returns>
        protected byte[] toBinaryArraySub()
        {
            //create memory stream and writer
            MemoryStream ms = new MemoryStream(64);//initial size for cell data 
            BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
            //convert data
            this.toBinary(bw);
            //close memory stream and get bytes
            bw.Close();
            return ms.ToArray();
        }

        #endregion
    }
}

+++Отзывы
* Слишком разветвленная процедура получилась, не ожидал этого. Сложно ее понимать и налаживать без диаграммы процесса исполнения.

+++Документация
todo: Описать происходящие процессы и написать текст для документации
Для лучшего понимания кода и написания документации Движка.
 