++ Задача Собрать Класс Настроек Солюшена
[template: ШаблонКарточкиЗадачи]

+++Состояние задачи
* выполнено 22.12.2018 23:00:09

+++Задание
Надо собрать класс MSolutionSettings хотя бы в минимальной конфигурации, чтобы тестировать остальной проект.
Нужен конструктор, основные поля и проперти, функции загрузки и выгрузки в Файл Солюшена.
Затем надо запланировать задачу привести содержимое класса в соответствие с концепцией Тапп Бар.

+++Зависимости
Добавить зависимости текущей задачи

+++Материалы
 * Ссылки на источники данных

+++Обсуждение и принятые решения
Просто копируем старый код в новый класс, не разбираясь, что там потребуется, а что нет. 

+++Выполняемые действия
1. создаем класс MSolutionSettings если не создан
2. Копируем в него листинг:

public class MSolutionSettings: MObject
    {
        #region *** Constants and Solution settings fields ***
            //TODO: Перенести константы Движка сюда
        #endregion

        #region *** Fields ***
//TODO: Проверить список полей, убрать ненужные
        //****** Solution properties ***********
        /// <summary>
        /// Project creation date
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private DateTime m_creadate;
        /// <summary>
        /// Project description
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_SolutionDescr;
        /// <summary>
        /// Project name
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_SolutionName;
        /// <summary>
        /// Project identifier
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private int m_solutionId;
        /// <summary>
        /// Project file pathname
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_SolutionFilePath;
        /// <summary>
        /// Solution version info
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private String m_solutionVersionString;
        /// <summary>
        /// Engine version info of Solution
        /// </summary>
        private String m_solutionEngineVersionString;
        /// <summary>
        /// Solution activity state
        /// </summary>
        private MSolutionState m_SolutionState;

        //**** container properties *****
        /// <summary>
        /// Container IsActive flag value
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private bool m_containerIsActive;
        /// <summary>
        /// Container service flag value
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private int m_containerServiceFlag;
        /// <summary>
        /// Container state identifier
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private UInt64 m_containerStateId_U64;

        /// <summary>
        /// Log file number
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private int m_logfileNumber;
        ///// <summary>
        ///// Log details flags
        ///// </summary>
        ///// <remarks></remarks>
        ///// <value></value>
        ///// <seealso cref=""/>
        //private MMessageClass m_logdetails;
        /// <summary>
        /// Container default cell mode
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private MCellMode m_defaultCellMode;

        //******** database properties **********
        /// <summary>
        /// Project database type
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private MDatabaseType m_dbtype;
        /// <summary>
        /// Database name
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_dbname;
        /// <summary>
        /// Database server path
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_dbServerPath;
        /// <summary>
        /// User name of database server account
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_username;
        /// <summary>
        /// User password of database server account
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private string m_userpass;
        /// <summary>
        /// Project connection timeout, seconds
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private int m_dbtimeout;
        /// <summary>
        /// Database server connection port, 0 for default port
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private int m_dbport;
        /// <summary>
        /// Server uses integrated security mode (for mssql2005)
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        private bool m_useIntegratedSecurity;

        #endregion

        #region *** MStatistic fields ***
        /// <summary>
        /// Number of const and temp cells in memory
        /// </summary>
        protected int m_cellsmem;
        /// <summary>
        /// Number of const cells in database
        /// </summary>
        protected int m_cellsconst;
        /// <summary>
        /// Number of temp cells in memory
        /// </summary>
        protected int m_cellstemp;
        /// <summary>
        /// Number of used external cells  in any other containers
        /// </summary>
        protected int m_cellsext;
        /// <summary>
        /// Number of const and temp links in memory
        /// </summary>
        protected int m_linksmem;
        /// <summary>
        /// Number of const links in database
        /// </summary>
        protected int m_linksconst;
        /// <summary>
        /// Number of temp links in memory
        /// </summary>
        protected int m_linkstemp;
        /// <summary>
        /// Number of links to any external cells
        /// </summary>
        protected int m_linksext;
        /// <summary>
        /// Number of resource files in project
        /// </summary>
        protected int m_resourcefiles;
        /// <summary>
        /// Size of resource files in bytes
        /// </summary>
        protected long m_resourcesize;
        #endregion

        /// <summary>
        /// Конструктор по умолчанию
        /// </summary>
        public MSolutionSettings()
        {
            //TODO: после завершения проектирования класса группировать тут поля по темам 
            //settings
            //Solution properties
            //container properties
            //database properties

            this.m_cellsconst = 0;
            this.m_cellsext = 0;
            this.m_cellsmem = 0;
            this.m_cellstemp = 0;
            this.m_containerIsActive = true;
            this.m_containerServiceFlag = 0;
            this.m_containerStateId_U64 = 0;
            this.m_creadate = DateTime.Now;
            this.m_dbname = String.Empty;
            this.m_dbport = 0;
            this.m_dbServerPath = String.Empty;
            this.m_dbtimeout = 60;
            this.m_dbtype = MDatabaseType.Unknown;
            this.m_defaultCellMode = MCellMode.Temporary;//для совместимости с СолюшенБезБД
            this.m_linksconst = 0;
            this.m_linksext = 0;
            this.m_linksmem = 0;
            this.m_linkstemp = 0;
            this.m_logfileNumber = 0;
            this.m_resourcefiles = 0;
            this.m_resourcesize = 0;
            this.m_SolutionDescr = String.Empty;
            this.m_solutionEngineVersionString = MVersion.getCurrentAssemblyVersion().ToString();
            this.m_SolutionFilePath = String.Empty;
            this.m_solutionId = 1;
            this.m_SolutionName = String.Empty;
            this.m_SolutionState = MSolutionState.Unknown;
            this.m_solutionVersionString = "1.0.0.0";
            this.m_useIntegratedSecurity = false;
            this.m_username = String.Empty;
            this.m_userpass = String.Empty;
            
            //TODO: Add code here...
        }

        /// <summary>
        /// Конструктор с путем файла солюшена
        /// </summary>
        /// <param name="solutionFilePath"></param>
        public MSolutionSettings(String solutionFilePath) : this()
        {
            this.SolutionFilePath = solutionFilePath;
        }

//TODO: Проверить список проперти, переделать и убрать ненужные

        #region *** Solution properties ***
        /// <summary>
        /// Project identifier
        /// </summary>
        /// <remarks>Same as container identifier</remarks>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Solution properties"), Description("Solution Id number")]
        public int SolutionId
        {
            get
            {
                return m_solutionId;
            }
            set
            {
                m_solutionId = value;
            }
        }

        /// <summary>
        /// Project name
        /// </summary>
        /// <remarks>Same as container name</remarks>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Solution properties"), Description("Solution name")]
        public string SolutionName
        {
            get
            {
                return m_SolutionName;
            }
            set
            {
                m_SolutionName = value;
            }
        }

        /// <summary>
        /// Project description
        /// </summary>
        /// <remarks>Same as container description</remarks>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Solution properties"), Description("Solution description")]
        public string SolutionDescription
        {
            get
            {
                return m_SolutionDescr;
            }
            set
            {
                m_SolutionDescr = value;
            }
        }

        /// <summary>
        /// Project creation date
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Solution properties"), Description("Solution initial date")]
        public DateTime SolutionCreationDate
        {
            get
            {
                return m_creadate;
            }
            set
            {
                m_creadate = value;
            }
        }


        /// <summary>
        /// Solution engine version
        /// </summary>
        /// <remarks>Это проперти для кода только</remarks>
        [XmlIgnore]
        internal MVersion SolutionEngineVersion
        {
            get
            {
                return new MVersion(m_solutionEngineVersionString);
            }
            set
            {
                m_solutionEngineVersionString = value.ToString();
            }
        }
        /// <summary>
        /// Solution engine version
        /// </summary>
        /// <remarks></remarks>
        [Category("Solution properties"), Description("Version of engine where Solution is created")]
        public String SolutionEngineVersionString
        {
            get
            {
                return m_solutionEngineVersionString;
            }
            set
            {
                m_solutionEngineVersionString = value;
            }
        }

        /// <summary>
        /// Solution dataset version
        /// </summary>
        /// <remarks>Это проперти для кода только</remarks>
        [XmlIgnore]
        internal MVersion SolutionVersion
        {
            get
            {
                return new MVersion(m_solutionVersionString);
            }
            set
            {
                m_solutionVersionString = value.ToString();
            }
        }
        /// <summary>
        /// Solution dataset version
        /// </summary>
        [Category("Solution properties"), Description("Solution dataset version")]
        public String SolutionVersionString
        {
            get
            {
                return m_solutionVersionString;
            }
            set
            {
                m_solutionVersionString = value;
            }
        }


        /// <summary>
        /// Текущее состояние Солюшена
        /// </summary>
        [Category("Solution properties"), Description("Solution activity state")]
        public MSolutionState SolutionState
        {
            get { return m_SolutionState; }
            set { this.m_SolutionState = value; }
        }
        
        /// <summary>
        /// Project file pathname
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [XmlIgnore]
        [Category("Solution properties"), Description("Solution file pathname")]
        public string SolutionFilePath
        {
            get
            {
                return m_SolutionFilePath;
            }
            set
            {
                m_SolutionFilePath = value;
            }
        }



        #endregion
        #region ** Database properties **
        /// <summary>
        /// Type of database for project
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server type")]
        public MDatabaseType DatabaseType
        {
            get
            {
                return m_dbtype;
            }
            set
            {
                m_dbtype = value;
            }
        }
        /// <summary>
        /// Database server path
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server path")]
        public string DatabaseServerPath
        {
            get
            {
                return m_dbServerPath;
            }
            set
            {
                m_dbServerPath = value;
            }
        }

        /// <summary>
        /// Database name
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Project database name")]
        public string DatabaseName
        {
            get
            {
                return m_dbname;
            }
            set
            {
                m_dbname = value;
            }
        }

        /// <summary>
        /// Database server port number, 0 for default
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server port number. Specify 0 for default value.")]
        public int DatabasePortNumber
        {
            get
            {
                return m_dbport;
            }
            set
            {
                m_dbport = value;
            }
        }
        /// <summary>
        /// Connection timeout, sec
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server connection timeout in seconds")]
        public int DatabaseTimeout
        {
            get
            {
                return m_dbtimeout;
            }
            set
            {
                m_dbtimeout = value;
            }
        }

        /// <summary>
        /// User name of database server account
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server account user name. For project creation, user must have dbcreator permission on SQL server")]
        public string UserName
        {
            get
            {
                return m_username;
            }
            set
            {
                m_username = value;
            }
        }

        /// <summary>
        /// User password of database server account
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server account user password")]
        public string UserPassword
        {
            get
            {
                return m_userpass;
            }
            set
            {
                m_userpass = value;
            }
        }

        /// <summary>
        /// Flag use integrated security for MsSql2005
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Database"), Description("Database server uses IntegratedSecurity autorization mode. For MsSql2005 only.")]
        public bool UseIntegratedSecurity
        {
            get
            {
                return m_useIntegratedSecurity;
            }
            set
            {
                m_useIntegratedSecurity = value;
            }
        }
        #endregion
        #region ** Container Properties **
        /// <summary>
        /// Container state identifier as U64-packed value
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Container properties"), Description("Container state identifier packed to U64")]
        public UInt64 ContainerState
        {
            get
            {
                return m_containerStateId_U64;
            }
            set
            {
                m_containerStateId_U64 = value;
            }
        }

        /// <summary>
        /// Container Is Active flag
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Container properties"), Description("Container is active flag value")]
        public bool ContainerIsActiveFlag
        {
            get
            {
                return m_containerIsActive;
            }
            set
            {
                m_containerIsActive = value;
            }
        }

        /// <summary>
        /// Container service flag value
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Container properties"), Description("Container service flag value")]
        public int ContainerServiceFlag
        {
            get
            {
                return m_containerServiceFlag;
            }
            set
            {
                m_containerServiceFlag = value;
            }
        }

        /// <summary>
        /// Container default cell mode для неявно загружаемых из БД ячеек
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Container properties"), Description("Container default cell mode")]
        public MCellMode ContainerDefaultCellMode
        {
            get
            {
                return m_defaultCellMode;
            }
            set
            {
                m_defaultCellMode = value;
            }
        }

        /// <summary>
        /// Log file number
        /// </summary>
        /// <remarks></remarks>
        /// <value></value>
        /// <seealso cref=""/>
        [Category("Container properties"), Description("Log file incremental number")]
        public int LogfileNumber
        {
            get
            {
                return m_logfileNumber;
            }
            set
            {
                m_logfileNumber = value;
            }
        }

        ///// <summary>
        ///// Log details flas
        ///// </summary>
        ///// <remarks></remarks>
        ///// <value></value>
        ///// <seealso cref=""/>
        //[Category("Container properties"), Description("Log details flags")]
        //public MMessageClass LogDetailsFlags
        //{
        //    get
        //    {
        //        return m_logdetails;
        //    }
        //    set
        //    {
        //        m_logdetails = value;
        //    }
        //}
        #endregion

        #region *** Solution settings properties ***
        /// <summary>
        /// NT-Текущая версия Движка,реализованная в коде этой сборки
        /// </summary>
        public MVersion CurrentEngineVersion
        {
            get { return MVersion.getCurrentAssemblyVersion(); }
        }

        #endregion

        #region *** MStatistic properties ***
        /// <summary>
        /// Number of const and temp cells in memory
        /// </summary>
        [Category("Statistics"), Description("Number of temporary and constant cells in memory")]
        public int CellsInMemory
        {
            get
            {
                return m_cellsmem;
            }
            set
            {
                m_cellsmem = value;
            }
        }

        /// <summary>
        /// Number of const cells in database
        /// </summary>
        [Category("Statistics"), Description("Number of constant cells in database")]
        public int ConstantCells
        {
            get
            {
                return m_cellsconst;
            }
            set
            {
                m_cellsconst = value;
            }
        }

        /// <summary>
        /// Number of temp cells in memory
        /// </summary>
        [Category("Statistics"), Description("Number of temporary cells")]
        public int TemporaryCells
        {
            get
            {
                return m_cellstemp;
            }
            set
            {
                m_cellstemp = value;
            }
        }

        /// <summary>
        /// Number of used external cells  in any other containers
        /// </summary>
        [Category("Statistics"), Description("Number of external linked cells")]
        public int ExternalCells
        {
            get
            {
                return m_cellsext;
            }
            set
            {
                m_cellsext = value;
            }
        }

        /// <summary>
        /// Number of const links in database
        /// </summary>
        [Category("Statistics"), Description("Number of constant links in database")]
        public int ConstantLinks
        {
            get
            {
                return m_linksconst;
            }
            set
            {
                m_linksconst = value;
            }
        }

        /// <summary>
        /// Number of const and temp links in memory
        /// </summary>
        [Category("Statistics"), Description("Number of constant and temporary links in memory")]
        public int LinksInMemory
        {
            get
            {
                return m_linksmem;
            }
            set
            {
                m_linksmem = value;
            }
        }

        /// <summary>
        /// Number of temp links in memory
        /// </summary>
        [Category("Statistics"), Description("Number of temporary links")]
        public int TemporaryLinks
        {
            get
            {
                return m_linkstemp;
            }
            set
            {
                m_linkstemp = value;
            }
        }

        /// <summary>
        /// Number of links to any external cells
        /// </summary>
        [Category("Statistics"), Description("Number of links to any external cells")]
        public int ExternalLinks
        {
            get
            {
                return m_linksext;
            }
            set
            {
                m_linksext = value;
            }
        }

        /// <summary>
        /// Number of resource files in project
        /// </summary>
        [Category("Statistics"), Description("Number of resource files in project")]
        public int ResourceFiles
        {
            get
            {
                return m_resourcefiles;
            }
            set
            {
                m_resourcefiles = value;
            }
        }

        /// <summary>
        /// Size of resource files in bytes
        /// </summary>
        [Category("Statistics"), Description("Size of resource files in bytes")]
        public long ResourceSize
        {
            get
            {
                return m_resourcesize;
            }
            set
            {
                m_resourcesize = value;
            }
        }
        #endregion

        /// <summary>
        /// NT-Создать или перезаписать Файл Солюшена, записать значения и закрыть файл.
        /// </summary>
        /// <remarks>Без записи в лог, или проверять его существование!</remarks>
        public void Save()//TODO: тестировать выгрузку и загрузку данных
        {
            System.Xml.Serialization.XmlSerializer writer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.StreamWriter file = new System.IO.StreamWriter(this.m_SolutionFilePath);
            writer.Serialize(file, this);
            file.Close();
        }

        /// <summary>
        /// NT-Открыть Файл Солюшена, загрузить значения и закрыть файл.
        /// </summary>
        /// <remarks>Без записи в лог, или проверять его существование!</remarks>
        /// <returns>Возвращает информацию о проекте, хранящуюся в файле проекта.</returns>
        public static MSolutionSettings Load(string filename)
        {
            //load file
            System.Xml.Serialization.XmlSerializer reader = new System.Xml.Serialization.XmlSerializer(typeof(MSolutionSettings));
            System.IO.StreamReader file = new System.IO.StreamReader(filename);
            MSolutionSettings result = (MSolutionSettings)reader.Deserialize(file);
            file.Close();
            result.m_SolutionFilePath = filename;
            return result;
        }

        /// <summary>
        /// Get current solution directory from Solution file pathname
        /// </summary>
        /// <returns>Возвращает текущий каталог, в котором находится сейчас файл солюшена.</returns>
        /// <remarks></remarks>
        /// <seealso cref=""/>
        public string getCurrentSolutionDirectory()
        {
            return Path.GetDirectoryName(this.m_SolutionFilePath);
        }

        /// <summary>
        /// Get string representation of object.
        /// </summary>
        /// <returns>Return string representation of object.</returns>
        public override string ToString()
        {
            return base.ToString();//TODO: Add code here...
        }

       #region *** MObject serialization functions ***
        /// <summary>
        /// Convert object data to binary stream
        /// </summary>
        /// <param name="writer">Binary stream writer</param>
        public override void toBinary(BinaryWriter writer)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from binary stream
        /// </summary>
        /// <param name="reader">Binary stream reader</param>
        public override void fromBinary(BinaryReader reader)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data to byte array
        /// </summary>
        /// <returns></returns>
        public override byte[] toBinaryArray()
        {
            //create memory stream and writer
            MemoryStream ms = new MemoryStream(64);//initial size for cell data 
            BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
            //convert data
            this.toBinary(bw);
            //close memory stream and get bytes
            bw.Close();
            return ms.ToArray();
        }
        /// <summary>
        /// Convert object data to text string
        /// </summary>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        /// <returns></returns>
        public override string toTextString(bool withHex)
        {
            throw new NotImplementedException();//TODO: Добавить обобщенный наследуемый код сериализации здесь
        }
        /// <summary>
        /// Convert object data to text stream
        /// </summary>
        /// <param name="writer">text stream writer</param>
        /// <param name="withHex">True - include HEX representation of binary data</param>
        public override void toText(TextWriter writer, bool withHex)
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// Convert object data from text stream
        /// </summary>
        /// <param name="reader">text stream reader</param>
        public override void fromText(TextReader reader)
        {
            throw new NotImplementedException();
        }
        #endregion
    }
 
3. Копируем в тестовое приложение листинг:
        private static void TestSolutionSettings()
        {
            String solutionFilePath = "C:\\Temp\\solutionTestFile.txt";

            //delete old file if exists 
            File.Delete(solutionFilePath);

            Console.WriteLine("Test Solution settings");
            //1 create new solution file
            MSolutionSettings s1 = new MSolutionSettings(solutionFilePath);
            //s1.SolutionFilePath = solutionFilePath;

            //2 save solution file
            s1.Save();
            
            //3 load solution file into new object
            MSolutionSettings s2 = MSolutionSettings.Load(solutionFilePath);
            
            //4 compare two files - manually
            if (s1.SolutionId != s2.SolutionId) Console.WriteLine("Solution test failed!");

            Console.WriteLine("Test Solution settings finished");
            
            return;
        }
4. Тестируем и отлаживаем тестовое приложение.  

+++Отзывы
Оказались ли принятые решения правильными и почему/почему нет.

+++Документация
todo: Описать происходящие процессы и написать текст для документации
Для лучшего понимания кода и написания документации Движка.
 