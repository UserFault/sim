
        private static void —оздать“естовый—олюшен(string rootfolder)
        {
            //создаем объект движка. “ут просто инициализаци€ движка без солюшена.
            MEngine d = new MEngine();
            //заполн€ем свойства нового солюшена
            //здесь закомментированы пол€, использующие значени€ по умолчанию
            MSolutionInfo info = new MSolutionInfo();
            info.DatabaseType = MDatabaseType.MicrosoftSqlServer2005;
            info.DatabaseName = "TestSolution";
            //info.DatabasePortNumber = 0;//by default
            info.DatabaseServerPath = ".";
            //info.DatabaseTimeout = 60;//by default
            //info.UseIntegratedSecurity = false;//by default
            info.UserName = "TappUser";
            info.UserPassword = "qwerty";

            info.SolutionName = "TestSolution";
            info.SolutionDescription = "Test project in 2017";
            //info.SolutionId = 1;//by default
            //info.SolutionVersion = new MSolutionVersionInfo("1.0.0.0");//by default

            info.ContainerDefaultCellMode = MCellMode.Compact;
            //info.ContainerIsActiveFlag = true;//by default
            //info.ContainerServiceFlag = 0;//by default
            //info.ContainerState = 0;//state by default
            //info.CreationDate = DateTime.Now; //by default
            //info.LogDetailsFlags = 0;//unknown
            //info.LogfileNumber = 0;//for first time - unknown
            //info.SolutionFilePath = "";//by default
            //info.SnapshotNumber = 0;//by default
            //info.SolutionEngineVersion = info.CurrentEngineVersion;//by default

            //создаем солюшен и инициализируем его данными движок.
            d.SolutionCreate(rootfolder, info);//создан, но не открыт

            //some work here

            //d.SolutionClose(true); - солюшен не открыт - нечего и закрывать
            d = null;
            return;
        }


        private static void ќткрыть—олюшен(string solutionFilePath)
        {
            //создаем объект движка. “ут просто инициализаци€ движка без солюшена.
            MEngine d = new MEngine();
            //открываем солюшен и инициализируем его данными движок.
            d.SolutionOpen(solutionFilePath);
            
            //some work here


            d.SolutionClose(true);
            d = null;
            return;
        }

        private static void TestSolutionOperations(string p)
        {
            try
            {
                ConsoleWriteLine("Solution operations test started");
                //создаем объект движка.
                MEngine d = new MEngine();
                //открываем солюшен и инициализируем его данными движок.
                d.SolutionOpen(p);
                ConsoleWriteLine("Solution opened");
                                
                Mary.Serialization.MStatistic stat = d.SolutionGetStatistics();
                PrintSolutionStatistics(stat);
                ConsoleWriteLine("Optimizing solution..");
                d.SolutionOptimize();
                stat = d.SolutionGetStatistics();
                PrintSolutionStatistics(stat);
                ConsoleWriteLine("Saving solution..");
                d.SolutionSave();
                ConsoleWriteLine("Clearing solution..");
                d.SolutionClear();
                stat = d.SolutionGetStatistics();
                PrintSolutionStatistics(stat);
                ConsoleWriteLine("Closing solution..");
                d.SolutionClose(false);
                d = null;
            }
            catch (Exception ex)
            {
                ConsoleWriteLine(ex.ToString());

            }
            ConsoleWriteLine("Solution operations test finished");
            return;
        }


        private static void PrintSolutionStatistics(Mary.Serialization.MStatistic stat)
        {
            ConsoleWriteLine("");
            ConsoleWriteLine("Solution statistics:");
            ConsoleWriteLine(String.Format("CellsInMemory: {0}", stat.CellsInMemory));
            ConsoleWriteLine(String.Format("ConstantCells: {0}", stat.ConstantCells));
            ConsoleWriteLine(String.Format("TemporaryCells: {0}", stat.TemporaryCells));
            ConsoleWriteLine(String.Format("ExternalCells: {0}", stat.ExternalCells));
            ConsoleWriteLine(String.Format("LinksInMemory: {0}", stat.LinksInMemory));
            ConsoleWriteLine(String.Format("ConstantLinks: {0}", stat.ConstantLinks));
            ConsoleWriteLine(String.Format("TemporaryLinks: {0}", stat.TemporaryLinks));
            ConsoleWriteLine(String.Format("ExternalLinks: {0}", stat.ExternalLinks));
            ConsoleWriteLine(String.Format("ResourceFiles: {0}", stat.ResourceFiles));
            ConsoleWriteLine(String.Format("ResourceSize: {0}", stat.ResourceSize));
            ConsoleWriteLine("");

            return;
        }
