Пользовательский проект - база по радиодеталям.
Описывать здесь всю работу над этим проектом.
Все необходимые изменения в коде должны оформляться как заявка на работу,
 это упростит работу над изменениями в проекте.
Идеи и теоретические материалы описывать по ходу работы, потом переносить в общий концепт, когда идея оформится.

220313
Пробный запуск системы.
- При отсутствии подключения к серверу БД выдается сообщение, но без звука ошибки.
 Пользователь ожидает звук подтверждения, тогда надо и звук отказа тоже выводить.
- Навигатор неудобен для просмотра связанных ячеек. 
   Лучше будет разместить контролы по горизонтали, чтобы видимых элементов было больше.
   Так оно будет совпадать с направлением текста. 
- Неактивные ячейки не заметно отличаются от активных. Надо ввести значительное отличие.
- Нужен способ вызова оптимизатора пользователем для удаления неактивных ячеек.
+ Навигация через меню мест выглядит удобно.
- Надо построить структуру для базы радиодеталей.
  - каждая деталь имеет:
    - тип (класс)
    - наименование (марка)
    - примечание (некоторый пользовательский текст)
    - описание (суммарное описание характеристик)
    - примерную стоимость
    - год выпуска  (пока не нужно)
    - тип корпуса (не у всех указан)
 - тип детали есть класс, и его надо свести в иерархию классов радиодеталей.
   Деталь является реализацией (объектом) этого класса.
   В свою очередь, деталь есть класс для реальных деталей этой марки.
 - наименование детали есть одна из характеристик детали, хотя обычно она представляет всю деталь.
   Ее можно вынести в отдельное свойство, продублировав в названии сущности детали. Тип данных - строка.
 - примечание есть персональное свойство детали,  его может и не быть. Тип данных - строка.
 - описание - как примечание.
 - примерная стоимость - свойство детали, может отсутствовать, тип данных - денежная единица, но пока что строка.
   Стоимости также надо сопоставлять дату, но пока не будем.
 - год выпуска - пока не нужно
 - тип корпуса - свойство детали. Выбирается из списка вариантов, то есть ссылка на элемент перечня корпусов.
   Тип корпуса сам по себе является классом, в котором, однако, нет объектов, кроме служебных.

Попробуем представить организацию.
- Создаем иерархию классов деталей
- Создаем иерархию классов корпусов деталей
- добавляем детали и их свойства.
Как реализовывать свойства?
Свойства являются семантическими слотами сущности. Слот задает интерпретацию сущности как свойства.
- Слот реализуется связью, обозначается типом связи. Например, примечание будет выглядеть как деталь-описание-транзистор.
  Применяется в Neo4J системе.
  Недостатки: Очень много типов связей будет в системе.
  Достоинства: Наглядность в текстовом отображении. 
- Слот реализуется связью, обозначается в классе
  ???
- Слот обозначается отдельной сущностью, которая указывает на реализацию.
  -: Очень много ячеек будет в системе
     -тогда можно применять их только для класса детали
      -тогда надо каждый раз обращаться к классу для получения смысла свойства
  +:     
- Слот обозначается названием ячейки, а значение хранится в данных ячейки.
  -: Неудобно для использования других классов в качестве данных. 

Попробуем описать вариант:
Деталь транзистор кт315а имеет свойство ТО (тип корпуса). ТО является подклассом класса корпусов.
Можно прямо связать кт315а и ТО связью типа агрегация. 
Тогда при рассмотрении кт315а обнаружится свойство со значением ТО, которое принадлежит к классу корпусов.
Однако это простой вариант, и смысл ТО, которое из класса корпусов, однозначен.
В большинстве случаев смысл надо обозначать. 
В литературе смысл описывается текстом вроде: Кт315а имеет корпус ТО. 
Тут все просто. Однако в литературе существуют и другие выражения: В качестве основания используется керамическая пластина.
Это попытка представить непрямосвязанное свойство. 
В данном случае известно, что у некоторой детали есть керамическая пластина, но куда ее отнести, если неизвестно, что это основание?        
Керамическая пластина может относиться к какому угодно классу, но из класса не следует ее роль в описываемой сущности.
Таким образом, для сущности необходимо указывать и описывать роль каждого свойства. То есть, семантический слот.
